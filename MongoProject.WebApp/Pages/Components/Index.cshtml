@page
@model IndexModel
@{
    ViewData["Title"] = "Components";
}

<h1 class="text-center">Components</h1>

<p class="mt-5 text-center">
    <a class="btn btn-success" asp-page="Add">Add new component</a>
</p>

<form class="mt-5 text-center" asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a class="btn btn-primary" asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table text-center">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Components[0].Name)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.TypeSort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Components[0].Type)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.QuantitySort" asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Components[0].Quantity)
                </a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Components)
        {
            <tr>
                <td>
                    <a asp-page="./Details" asp-route-id="@item.Id">@Html.DisplayFor(modelItem => item.Name)</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
            </tr>
        }
    </tbody>
</table>

<hr />

@{
    var prevDisabled = !Model.Components.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Components.HasNextPage ? "disabled" : "";
}

<div class="container text-center mt-5">
    <span class="mr-4"><b>Page: @Model.Components.PageIndex</b></span>

    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Components.PageIndex - 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-primary mr-4 @prevDisabled">
        Previous
    </a>
    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Components.PageIndex + 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-primary @nextDisabled">
        Next
    </a>
</div>